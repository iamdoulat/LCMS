
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an Admin or Super Admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role.hasAny(['Admin', 'Super Admin']);
    }

    // Helper function to check if a user is authenticated and has any role
    function isSignedIn() {
      return request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    // Helper function to check if a user is the owner of a document
     function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users can read/update their own profile. Admins can manage all users.
    match /users/{userId} {
      allow read, update: if isOwner(userId) || isAdmin();
      allow create: if request.auth != null; // Allow any authenticated user to create their own user document
      allow delete: if isAdmin();
    }
    
    // Admins can manage core settings. All signed-in users can read.
    match /financial_settings/{docId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    match /counters/{docId} {
        allow read, write: if isSignedIn(); // Allow any signed-in user to increment counters
    }

    // Generic rules for most data collections
    match /{collection}/{docId} where collection in ['quotes', 'invoices', 'orders', 'sales', 'items', 'quote_items', 'customers', 'suppliers', 'lc_entries', 'proforma_invoices', 'installation_reports', 'demo_machines', 'demo_machine_factories', 'demo_machine_applications', 'payments'] {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
  }
}
