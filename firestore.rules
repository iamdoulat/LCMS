
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check user role
    function isUserRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    function isUserInRoles(roles) {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return userRole in roles;
    }

    // Users collection:
    // - Authenticated users can read their own profile.
    // - Authenticated users can create their own profile upon registration.
    // - Authenticated users can update their own profile (displayName, photoURL, etc.).
    // - Admins/Super Admins can read and update any user's profile.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isUserInRoles(['Super Admin', 'Admin']));
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && (request.auth.uid == userId || isUserInRoles(['Super Admin', 'Admin']));
      allow delete: if isUserRole('Super Admin'); // Only Super Admins can delete users
    }

    // Company Profile collection:
    // - Any authenticated user can read the company profile.
    // - Only Admins/Super Admins can write to the company profile.
    match /company_profile/{docId} {
        allow read: if request.auth != null;
        allow write: if isUserInRoles(['Super Admin', 'Admin']);
    }

    // Financial Settings collection:
    // - Any authenticated user can read the financial settings for documents.
    // - Only Admins/Super Admins can write to the financial settings.
    match /financial_settings/{docId} {
        allow read: if request.auth != null;
        allow write: if isUserInRoles(['Super Admin', 'Admin']);
    }

    // Counters collection:
    // - Used for generating sequential IDs. Write access should be handled securely,
    //   ideally through backend functions or with strict rules. For now, allow writes for authenticated users.
    match /counters/{docId} {
      allow read, write: if request.auth != null;
    }

    // Generic rule for most other data collections (lc_entries, customers, suppliers, etc.)
    // Allows any authenticated user to read/write.
    // In a production app, these rules would be much more granular.
    match /{collection}/{docId} {
      allow read, write: if request.auth != null;
    }
  }
}
