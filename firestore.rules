rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin roles
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Super Admin'];
    }

    // Users collection rules
    match /users/{userId} {
      // Any authenticated user can read any profile to get names, etc.
      allow read: if request.auth != null;
      // Users can update their own profile. Admins can update any profile.
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      // User creation is handled by the auth flow. No direct creates.
      allow create: if request.auth != null;
    }

    // Rules for financial_settings and company_profile
    // Only Admins or Super Admins can write. Any authenticated user can read.
    match /financial_settings/{docId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    match /company_profile/{docId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // General rule for business data collections.
    // This allows the prototype to function. For production, you would
    // add more granular rules for each collection based on roles.
    match /{path=**}/{docId} {
      // This rule does NOT apply to the collections defined above it.
      allow read, write: if request.auth != null;
    }
  }
}
