
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an Admin or Super Admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Super Admin'];
    }

    // Helper function to check if a user is a Super Admin
    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Super Admin';
    }
    
    // By default, deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // --- User Profiles ---
    // Users can read/update their own profile. Admins can manage all users.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow create: if request.auth != null; // Any authenticated user can create their own profile entry upon registration.
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      // Deleting users should ideally be handled by a backend function for security,
      // but we allow Super Admins to delete the Firestore document for this app.
      allow delete: if isSuperAdmin();
    }
    
    // --- App Configuration ---
    // Company profile is readable by all authenticated users, writable only by admins.
    match /company_profile/{profileId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
    
    // Counters need to be writeable by authenticated users who create documents.
    match /counters/{counterId} {
        allow read, write: if request.auth != null;
    }

    // --- Core Business Collections ---
    // Allow any authenticated user to read and write to all main business collections.
    // For a production app, you could tighten these rules further based on specific user roles.
    match /lc_entries/{lcId} {
      allow read, write: if request.auth != null;
    }
    match /customers/{customerId} {
      allow read, write: if request.auth != null;
    }
    match /suppliers/{supplierId} {
      allow read, write: if request.auth != null;
    }
    match /proforma_invoices/{piId} {
      allow read, write: if request.auth != null;
    }
    match /items/{itemId} {
      allow read, write: if request.auth != null;
    }
    match /sales/{saleId} {
        allow read, write: if request.auth != null;
    }
    match /invoices/{invoiceId} {
        allow read, write: if request.auth != null;
    }
    match /orders/{orderId} {
        allow read, write: if request.auth != null;
    }
     match /payments/{paymentId} {
        allow read, write: if request.auth != null;
    }
    match /installation_reports/{reportId} {
        allow read, write: if request.auth != null;
    }
    match /demo_machines/{machineId} {
        allow read, write: if request.auth != null;
    }
    match /demo_machine_factories/{factoryId} {
        allow read, write: if request.auth != null;
    }
    match /demo_machine_applications/{applicationId} {
        allow read, write: if request.auth != null;
    }
  }
}
