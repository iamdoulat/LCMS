
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a specific role
    function hasRole(role) {
      let userRoles = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      if (userRoles is list) {
        return role in userRoles;
      }
      return userRoles == role; // Fallback for single role
    }
    
    // Helper function to check for multiple roles
    function isOneOfRoles(roles) {
      let userRoles = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
       if (userRoles is list) {
        return userRoles.hasAny(roles);
      }
      return userRoles in roles; // Fallback for single role
    }

    match /users/{userId} {
      allow list: if request.auth != null && (hasRole('Admin') || hasRole('Super Admin') || hasRole('Viewer'));
      allow get: if request.auth != null && (request.auth.uid == userId || hasRole('Admin') || hasRole('Super Admin') || hasRole('Viewer'));
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && (
                      (request.auth.uid == userId && !('role' in request.resource.data)) ||
                      hasRole('Admin') || 
                      hasRole('Super Admin')
                    );
      allow delete: if request.auth != null && hasRole('Super Admin');
    }

    match /lc_entries/{lcId} {
      allow read: if request.auth != null && !hasRole('User');
      allow write: if request.auth != null && (hasRole('Admin') || hasRole('Super Admin'));
    }
    
    match /proforma_invoices/{piId} {
      allow read: if request.auth != null && (isOneOfRoles(['Super Admin', 'Admin', 'Viewer']) || hasRole('Store Manager'));
      allow write: if request.auth != null && (isOneOfRoles(['Super Admin', 'Admin']) || hasRole('Store Manager'));
    }

    match /customers/{customerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && !hasRole('Viewer');
    }

    match /suppliers/{supplierId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && !hasRole('Viewer');
    }

    match /installation_reports/{reportId} {
      allow read: if request.auth != null && isOneOfRoles(['Super Admin', 'Admin', 'Service', 'Viewer']);
      allow write: if request.auth != null && isOneOfRoles(['Super Admin', 'Admin', 'Service']);
    }
    
    match /demo_machine_factories/{factoryId} {
       allow read: if request.auth != null && isOneOfRoles(['Super Admin', 'Admin', 'DemoManager', 'Viewer']);
       allow write: if request.auth != null && isOneOfRoles(['Super Admin', 'Admin', 'DemoManager']);
    }

    match /demo_machines/{machineId} {
       allow read: if request.auth != null && isOneOfRoles(['Super Admin', 'Admin', 'DemoManager', 'Viewer']);
       allow write: if request.auth != null && isOneOfRoles(['Super Admin', 'Admin', 'DemoManager']);
    }

    match /demo_machine_applications/{applicationId} {
      allow read: if request.auth != null && isOneOfRoles(['Super Admin', 'Admin', 'DemoManager', 'Viewer']);
      allow write: if request.auth != null && isOneOfRoles(['Super Admin', 'Admin', 'DemoManager']);
    }

    match /financial_settings/{docId} {
       allow read: if request.auth != null;
       allow write: if request.auth != null && isOneOfRoles(['Super Admin', 'Admin']);
    }
    
    match /items/{itemId} {
       allow read: if request.auth != null && isOneOfRoles(['Super Admin', 'Admin', 'Store Manager', 'Viewer']);
       allow write: if request.auth != null && isOneOfRoles(['Super Admin', 'Admin', 'Store Manager']);
    }
    
    match /sales/{saleId} {
       allow read, write: if request.auth != null && isOneOfRoles(['Super Admin', 'Admin', 'Store Manager']);
    }
    
    match /payments/{paymentId} {
       allow read, write: if request.auth != null && isOneOfRoles(['Super Admin', 'Admin', 'Store Manager']);
    }

    match /quotes/{quoteId} {
      allow read, write: if request.auth != null && isOneOfRoles(['Super Admin', 'Admin', 'Store Manager']);
    }

    match /orders/{orderId} {
      allow read, write: if request.auth != null && isOneOfRoles(['Super Admin', 'Admin', 'Store Manager']);
    }

    match /invoices/{invoiceId} {
      allow read, write: if request.auth != null && isOneOfRoles(['Super Admin', 'Admin', 'Store Manager']);
    }

    // Default deny all other collections unless specified
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

    